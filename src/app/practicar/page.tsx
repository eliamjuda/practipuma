"use client";
import { useEffect, useState } from "react";
import OptionCard from "./components/OptionCard";
import ReactKatex from "@pkasila/react-katex";
import Header from "./components/Header";
import ProgressBar from "./components/ProgressBar";
import Button from "@/components/ui/buttonPP";
import { GameModes, PracticeQuestion } from "@/types/practice";
import { usePracticeParams } from "@/hooks/usePracticeParams";
import PracticeSummary from "./components/PracticeSummary";

const LETTERS = ["A", "B", "C", "D"];

// Datos de ejemplo con m√∫ltiples preguntas
const mockQuestions: PracticeQuestion[] = [
  {
    question: {
      question_id: 1,
      subject: 'Matem√°ticas',
      subtopic: '√Ålgebra lineal',
      statement: "¬øCu√°l de las siguientes funciones tiene un comportamiento creciente?",
      explanation: "La respuesta correcta es f(x) = x¬≥, ya que su derivada 3x¬≤ es siempre positiva para x ‚â† 0.",
      type: "text",
    },
    answers: [
      { option_id: 1, content: "$ f(x) = \\frac{3}{x} $", is_correct: false, type: "latex" },
      { option_id: 2, content: "$ f(x) = -3^{-x} $", is_correct: false, type: "latex" },
      { option_id: 3, content: "$ f(x) = -3x $", is_correct: false, type: "latex" },
      { option_id: 4, content: "$ f(x) = x^3 $", is_correct: true, type: "latex" },
    ],
  },
  {
    question: {
      question_id: 2,
      subject: 'Espa√±ol',
      subtopic: 'Un subtema bien largu√≠simo como la UNAM los pone a veces',
      statement: "¬øCu√°l es la derivada de f(x) = 2x¬≤ + 3x - 1?",
      explanation: "La derivada se calcula aplicando la regla de la potencia: d/dx(ax^n) = nax^(n-1).",
      type: "text",
    },
    answers: [
      { option_id: 1, content: "$ f'(x) = 4x + 3 $", is_correct: true, type: "latex" },
      { option_id: 2, content: "$ f'(x) = 2x + 3 $", is_correct: false, type: "latex" },
      { option_id: 3, content: "$ f'(x) = 4x¬≤ + 3x $", is_correct: false, type: "latex" },
      { option_id: 4, content: "$ f'(x) = x + 3 $", is_correct: false, type: "latex" },
    ],
  },
  {
    question: {
      question_id: 3,
      subject: 'Geograf√≠a',
      subtopic: 'La tierra y el negocio',
      statement: "¬øCu√°l es el l√≠mite de (x¬≤ - 4)/(x - 2) cuando x tiende a 2?",
      explanation: "Se puede factorizar el numerador: (x¬≤ - 4) = (x + 2)(x - 2), por lo que el l√≠mite es 4.",
      type: "text",
    },
    answers: [
      { option_id: 1, content: "$ 2 $", is_correct: false, type: "latex" },
      { option_id: 2, content: "$ 4 $", is_correct: true, type: "latex" },
      { option_id: 3, content: "$ 0 $", is_correct: false, type: "latex" },
      { option_id: 4, content: "$ \\infty $", is_correct: false, type: "latex" },
    ],
  },
  {
    question: {
      question_id: 4,
      subject: 'Literatura',
      subtopic: 'Pessoa',
      statement: "Fernando Ant√≥nio Nogueira Pessoa (Lisboa, 13 de junio de 1888-ibidem, 30 de noviembre de 1935), conocido como Fernando Pessoa, fue un poeta, escritor, cr√≠tico literario, dramaturgo, ensayista, traductor, editor y fil√≥sofo portugu√©s, descrito como una de las figuras literarias m√°s importantes del siglo XX y uno de los grandes poetas en lengua portuguesa. Tambi√©n tradujo y escribi√≥ en ingl√©s y franc√©s. Se le ha llamado el poeta portugu√©s m√°s universal. Por haber sido educado en Sud√°frica, en una escuela cat√≥lica irlandesa de Durban, lleg√≥ a tener m√°s familiaridad con el idioma ingl√©s que con el portugu√©s, escribiendo en tal idioma sus primeros poemas. El cr√≠tico literario Harold Bloom consider√≥ a Pessoa como ¬´Whitman renacido¬ª,[8]‚Äã y lo incluy√≥ entre los 26 mejores escritores de la civilizaci√≥n occidental, no solo de la literatura portuguesa sino de la inglesa tambi√©n. De las cuatro obras que public√≥ en vida, tres son en lengua inglesa y solo una en portugu√©s, titulada Mensagem. Pessoa tradujo varias obras del ingl√©s al portugu√©s (p. ej., de Shakespeare o Edgar Allan Poe), y del portugu√©s (en particular, de Ant√≥nio Botto y Jos√© de Almada Negreiros) al ingl√©s y al franc√©s. Pessoa fue un escritor prol√≠fico, y no solo bajo su propio nombre, pues cre√≥ aproximadamente otros setenta y cinco, de los cuales destacan los de Alberto Caeiro, Alexander Search, √Ålvaro de Campos, Bernardo Soares y Ricardo Reis. No los llamaba pseud√≥nimos, pues cre√≠a que esta palabra no captaba su verdadera vida intelectual independiente, y en cambio los llam√≥ sus heter√≥nimos. Estas figuras imaginarias a veces mostraban posturas impopulares o extremas. El poeta estadounidense Robert Hass ha dicho al respecto que: ¬´otros modernistas como Yeats, Pound o Elliot inventaban m√°scaras a trav√©s de las cuales hablaban ocasionalmente... Pessoa inventaba poetas enteros¬ª. Busc√≥ tambi√©n inspiraciones en las obras de los poetas William Wordsworth, James Joyce y Walt Whitman.",
      explanation: "La integral de 3x¬≤ es x¬≥ + C, aplicando la regla de integraci√≥n de potencias.",
      type: "text",
    },
    answers: [
      { option_id: 1, content: "Fernando Pessoa naci√≥ el 13 de junio de 1888 en la capital portuguesa,[a]‚Äã hijo de Joaquim de Seabra Pessoa, de 38 a√±os, funcionario p√∫blico del Ministerio de Justicia, y cr√≠tico musical del peri√≥dico Di√°rio de Not√≠cias, y natural de Lisboa", is_correct: false, type: "latex" },
      { option_id: 2, content: "Fernando Pessoa naci√≥ el 13 de junio de 1888 en la capital portuguesa,[a]‚Äã hijo de Joaquim de Seabra Pessoa, de 38 a√±os, funcionario p√∫blico del Ministerio de Justicia, y cr√≠tico musical del peri√≥dico Di√°rio de Not√≠cias, y natural de Lisboa", is_correct: true, type: "latex" },
      { option_id: 3, content: "Fernando Pessoa naci√≥ el 13 de junio de 1888 en la capital portuguesa,[a]‚Äã hijo de Joaquim de Seabra Pessoa, de 38 a√±os, funcionario p√∫blico del Ministerio de Justicia, y cr√≠tico musical del peri√≥dico Di√°rio de Not√≠cias, y natural de Lisboa", is_correct: false, type: "latex" },
      { option_id: 4, content: "Fernando Pessoa naci√≥ el 13 de junio de 1888 en la capital portuguesa,[a]‚Äã hijo de Joaquim de Seabra Pessoa, de 38 a√±os, funcionario p√∫blico del Ministerio de Justicia, y cr√≠tico musical del peri√≥dico Di√°rio de Not√≠cias, y natural de Lisboa", is_correct: false, type: "latex" },
    ],
  },
  {
    question: {
      question_id: 5,
      subject: 'Eliam',
      subtopic: 'Jud√°',
      statement: "¬øQu√© representa la segunda derivada de una funci√≥n?",
      explanation: "La segunda derivada indica la concavidad de la funci√≥n y los puntos de inflexi√≥n.",
      type: "text",
    },
    answers: [
      { option_id: 1, content: "La pendiente de la funci√≥n", is_correct: false, type: "text" },
      { option_id: 2, content: "La concavidad de la funci√≥n", is_correct: true, type: "text" },
      { option_id: 3, content: "El √°rea bajo la curva", is_correct: false, type: "text" },
      { option_id: 4, content: "Los puntos cr√≠ticos", is_correct: false, type: "text" },
    ],
  },
];

export default function Practicar() {
  const config = usePracticeParams();
  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);
  const [selectedOption, setSelectedOption] = useState<number | null>(null);
  const [confirmed, setConfirmed] = useState(false);
  const [practiceComplete, setPracticeComplete] = useState(false);
  const [userAnswers, setUserAnswers] = useState<{questionId: number, selectedAnswer: number, isCorrect: boolean}[]>([]);
  const [showExplanationModal, setShowExplanationModal] = useState(false);
  const [startTime] = useState(Date.now()); 
  const [timeLeft, setTimeLeft] = useState(config.selectedTime*60);
  const [timeExpired, setTimeExpired] = useState(false);
  const [tiempoFinal, setTiempoFinal] = useState<string | null>(null);
  const MAX_LIVES = 3;
  const [lives, setLives] = useState(MAX_LIVES);

  const totalQuestions = config.questions;
  const currentQuestion = mockQuestions[currentQuestionIndex];
  const progress = ((currentQuestionIndex + 1) / totalQuestions) * 100;

  // ‚è± Temporizador que termina el juego
  useEffect(() => {
    if (!config.timerEnabled || timeLeft <= 0) return;

    const interval = setInterval(() => {
      setTimeLeft(prev => {
        if (prev <= 1) {
          clearInterval(interval);
          const finalTime = getFormattedElapsedTime(startTime); // üëà
          setTiempoFinal(finalTime);
          setTimeout(() => {
            setPracticeComplete(true);
            setTimeExpired(true);
          }, 2000);
          return 0;
        }
        return prev - 1;
      });
    }, 1000);

    return () => clearInterval(interval);
  }, [config.timerEnabled, timeLeft, startTime]);

  const handleSelect = (index: number) => {
    if (!confirmed) setSelectedOption(index);
  };


  function getFormattedElapsedTime(startTime: number): string {
    const elapsedMs = Date.now() - startTime;
    const totalSeconds = Math.floor(elapsedMs / 1000);

    const minutes = Math.floor(totalSeconds / 60);
    const seconds = totalSeconds % 60;

    return `${minutes}m ${seconds < 10 ? '0' : ''}${seconds}s`;
  }


  const handleConfirm = () => {
    if (selectedOption !== null) {
      const isCorrect = currentQuestion.answers[selectedOption].is_correct;
      setUserAnswers(prev => [...prev, {
        questionId: currentQuestion.question.question_id,
        selectedAnswer: selectedOption,
        isCorrect: isCorrect
      }]);
      setConfirmed(true);

      if (config.mode === GameModes.HARDCORE && !isCorrect) {
      setLives(prev => {
        const updated = prev - 1;
        if (updated <= 0) {
          setPracticeComplete(true);
        }
        return updated;
      });
    }
    }
  };

  const handleContinue = () => {
    if (currentQuestionIndex < totalQuestions - 1) {
      // Ir a la siguiente pregunta
      setCurrentQuestionIndex(prev => prev + 1);
      setSelectedOption(null);
      setConfirmed(false);
    } else {
      setTimeout(() => {
        const finalTime = getFormattedElapsedTime(startTime);
        setTiempoFinal(finalTime);
        setPracticeComplete(true);

      }, 2000); // 2 segundos de loading
    }
  };

  const handleReport = () => {
    // Aqu√≠ puedes implementar la l√≥gica para reportar la pregunta
    console.log(`Reportando pregunta ${currentQuestion.question.question_id}`);
    // Podr√≠as enviar a una API o mostrar un formulario
    alert('Pregunta reportada. Gracias por tu feedback.');
  };

  const handleShowExplanation = () => {
    setShowExplanationModal(true);
  };

  const handleCloseExplanation = () => {
    setShowExplanationModal(false);
  };


  // Determinar si la respuesta seleccionada es correcta
  const isSelectedCorrect = selectedOption !== null ? currentQuestion.answers[selectedOption].is_correct : false;

  // Determinar el texto y estilo del bot√≥n
  const getButtonText = () => {
    if (!confirmed) return "Confirmar";
    if (currentQuestionIndex < totalQuestions - 1) return "Continuar";
    return "Finalizar";
  };

  const getButtonVariant = () => {
    if (!confirmed) return "normal";
    return isSelectedCorrect ? "correct" : "incorrect";
  };

  // Calcular estad√≠sticas finales

  if (practiceComplete) {
    return (
      <PracticeSummary
        userAnswers={userAnswers}
        totalQuestions={totalQuestions}
        totalTime={tiempoFinal}
        timeExpired={timeExpired}
        questions={mockQuestions.slice(0, Math.min(totalQuestions, mockQuestions.length))}
      />
    );
  }

  return (
    <div className="h-screen w-screen flex flex-col">
      <Header
        subject={currentQuestion.question.subject || "Materia"}
        subtopic={currentQuestion.question.subtopic || "Subtema"}
        showTimer={config.timerEnabled}
        totalTime={timeLeft}
      />
      <div className="flex-1 overflow-y-auto flex justify-center">
        <div className="w-full md:w-[30%] p-2 md:p-8">
          <ProgressBar 
            current={currentQuestionIndex + 1} 
            total={totalQuestions} 
            progress={progress}
            lives={config.mode === GameModes.HARDCORE ? lives : undefined}
          />

          <div className="min-h-[40%] flex items-center justify-center text-center text-1xl md:text-xl font-medium mb-6">
            <ReactKatex>{currentQuestion.question.statement}</ReactKatex>
          </div>

          <div className="space-y-2">
            {currentQuestion.answers.map((answer, index) => {
              const isSelected = selectedOption === index;
              const isCorrect = confirmed ? answer.is_correct : null;

              return (
                <OptionCard
                  key={answer.option_id}
                  letter={LETTERS[index]}
                  content={answer.content}
                  selected={isSelected}
                  isCorrect={isSelected ? isCorrect : null}
                  showCorrect={confirmed && answer.is_correct}
                  onClick={() => handleSelect(index)}
                />
              );
            })}
          </div>

          <div className="md:h-10 h-5"></div>
        </div>
      </div>

      {/* Modal de explicaci√≥n */}
      {showExplanationModal && (
        <div className="fixed inset-0 bg-(--principal-main-color)/70 flex items-center justify-center z-50">
          <div className="bg-(--principal-secondary-color) md:border-2 md:border-(--shadow) rounded-lg md:max-w-lg md:w-full md:mx-4 md:mb-32 w-full h-full md:h-auto md:max-h-[70vh] overflow-y-auto">
            <div className="p-6">
              <div className="flex py-6 justify-between items-center mb-4">
                <h3 className="text-lg font-semibold">Justificaci√≥n</h3>
                <button
                  onClick={handleCloseExplanation}
                  className="cursor-pointer text-gray-500 hover:text-gray-700 text-4xl"
                >
                  √ó
                </button>
              </div>
              <div className="text-(--text) leading-relaxed md:pb-4">
                <ReactKatex>{currentQuestion.question.explanation}</ReactKatex>
              </div>
            </div>
          </div>
        </div>
      )}

      <div className=" bg-(--principal-secondary-color) sticky bottom-0 w-full border-t border-(--shadow) min-h-[100px] py-6 flex flex-col justify-center items-center">
        {/* Iconos de acci√≥n - Solo se muestran despu√©s de confirmar */}
        {confirmed && (
          <div className="flex gap-6 mb-4">
                        <button
              onClick={handleShowExplanation}
              className={`flex flex-col items-center text-gray-600 hover:text-blue-500 transition-colors ${config.showJustifications ? 'visible' : 'invisible'}`}
            >
              <svg className="cursor-pointer w-5 h-5 mb-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
              </svg>
              <span className="text-xs">Justificaci√≥n</span>
            </button>
            <button
              onClick={handleReport}
              className=" flex flex-col items-center text-gray-600 hover:text-red-500 transition-colors"
            >
              <svg className="cursor-pointer w-5 h-5 mb-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M3 21v-4m0 0V5a2 2 0 012-2h6.5l1 1H21l-3 6 3 6h-8.5l-1-1H5a2 2 0 00-2 2zm9-13.5V9" />
              </svg>
              <span className="text-xs">Reportar</span>
            </button>
            

          </div>
        )}
        
        <Button 
          onClick={confirmed ? handleContinue : handleConfirm}
          disabled={selectedOption === null}
          variant={getButtonVariant()}
          className={`${selectedOption === null ? 'opacity-50 cursor-not-allowed' : ''}`}
        >
          {getButtonText()}
        </Button>
      </div>
    </div>
  );
}